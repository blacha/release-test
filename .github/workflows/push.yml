name: push

on: [push]

jobs:
  build-containers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Get GIT Version infromation
        id: version
        run: |
            GIT_VERSION=$(git describe --tags --always --match 'v*')
            GIT_VERSION_MAJOR=$(echo $GIT_VERSION | cut -d. -f1)
            GIT_VERSION_MAJOR_MINOR=$(echo $GIT_VERSION | cut -d. -f1,2)

            echo "version=${GIT_VERSION}" >> $GITHUB_OUTPUT
            echo "version_major=${GIT_VERSION_MAJOR}" >> $GITHUB_OUTPUT
            echo "version_major_minor=${GIT_VERSION_MAJOR_MINOR}" >> $GITHUB_OUTPUT
      - name: Setup docker tags
        id: tags
        uses:  actions/github-script@v6
        with: 
            result-encoding: string
            script: 
              const repositories = [
                `ghcr.io/${{ github.repository }}:[suffix]`
              ];

              const isMaster = context.ref === 'refs/heads/master';
              const isRelease = context.payload.head_commit.message.startsWith('release:');
              const suffix = [];

              // Always include "latest" and 
              suffix.push('latest');
              suffix.push('${{ steps.version.outputs.version }}');

              // If released add :v2 and v2.0 tags
              if (isRelease) {
                suffix.push('${{ steps.version.outputs.version_major_minor }}');
                suffix.push('${{ steps.version.outputs.version_mjor }}');
              }

              const tags = repositories.map(repo => suffix.map(suffix => repo.replace('[suffix]', suffix))).flat().join('\n')
              console.log(tags);
              return tags;
          
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker build and push - Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          tags: ${{ steps.tags.outputs.result }}
          build-args:
            GIT_VERSION=${{ steps.version.outputs.version }}
            GIT_HASH=${{ github.sha }}
          push: false